name: api

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "**"
    paths:
      - "**"

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: go_todo
  ECS_SERVICE: go-app-prod-service
  ECS_CLUSTER: go-app-prod-cluster

jobs:
  test:
    name: Run go test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: './go.mod'

      - name: Run tests
        run: go test -v ./...

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4
      - name: test
        run: echo ${{ secrets.AWS_ACCESS_KEY }} && echo ${{ secrets.AWS_SECRET_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f ./docker/Dockerfile.prod --platform=linux/x86_64 .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy
        id: deploy
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment --region ${{ env.AWS_REGION }}
